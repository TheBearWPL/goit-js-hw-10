{"version":3,"file":"01-timer.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startBtn = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\nlet userSelectedDate = null; // Zmienna przechowująca wybraną datę\nlet timerInterval = null; // Zmienna do przechowywania identyfikatora interwału\nlet isTimerRunning = false; // Flaga do sprawdzania, czy timer już działa\n\n// Konfiguracja flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    // Sprawdzamy, czy wybrana data jest w przyszłości\n    if (userSelectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = isTimerRunning; // Aktywujemy przycisk \"Start\" tylko, jeśli timer nie działa\n    }\n  },\n};\n\n// Inicjalizacja flatpickr na polu input\nflatpickr(\"#datetime-picker\", options);\n\n// Obsługa kliknięcia przycisku \"Start\"\nstartBtn.addEventListener(\"click\", () => {\n  if (isTimerRunning) return; // Jeśli timer już działa, nie rób nic\n\n  if (timerInterval) {\n    clearInterval(timerInterval); // Jeśli timer już działa, zatrzymaj go\n  }\n\n  isTimerRunning = true; // Ustaw flagę, że timer jest uruchomiony\n  startBtn.disabled = true; // Dezaktywujemy przycisk po starcie\n  timerInterval = setInterval(() => {\n    const currentTime = new Date();\n    const timeLeft = userSelectedDate - currentTime; // Obliczamy pozostały czas\n\n    if (timeLeft <= 0) {\n      clearInterval(timerInterval); // Zatrzymujemy timer, gdy dojdzie do końca\n      iziToast.success({\n        title: 'Success',\n        message: 'Countdown finished!',\n      });\n      updateTimerUI(0); // Resetujemy licznik\n      isTimerRunning = false; // Resetujemy flagę po zakończeniu\n      return;\n    }\n\n    const time = convertMs(timeLeft);\n    updateTimerUI(time); // Aktualizujemy interfejs użytkownika\n  }, 1000);\n});\n\n// Funkcja przeliczająca milisekundy na dni, godziny, minuty i sekundy\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// Funkcja aktualizująca interfejs licznika\nfunction updateTimerUI({ days, hours, minutes, seconds }) {\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n}\n\n// Funkcja dodająca wiodące zero, jeśli liczba ma mniej niż dwa znaki\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n// Użytkownik wybiera datę za pomocą flatpickr.\n// Jeśli data jest w przeszłości, wyświetli się powiadomienie o błędzie za pomocą iziToast, a przycisk „Start” pozostanie nieaktywny.\n// Po wybraniu daty w przyszłości, użytkownik może uruchomić licznik.\n// Licznik aktualizuje dni, godziny, minuty i sekundy co sekundę.\n// Gdy czas się skończy, timer zatrzymuje się i wyświetla powiadomienie o sukcesie."],"names":["startBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerInterval","isTimerRunning","options","selectedDates","iziToast","flatpickr","timeLeft","updateTimerUI","time","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value"],"mappings":"+IAKA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EACzD,IAAIC,EAAmB,KACnBC,EAAgB,KAChBC,EAAiB,GAGrB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBJ,EAAmBI,EAAc,CAAC,EAE9BJ,EAAmB,IAAI,MACzBK,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDV,EAAS,SAAW,IAEpBA,EAAS,SAAWO,CAEvB,CACH,EAGAI,EAAU,mBAAoBH,CAAO,EAGrCR,EAAS,iBAAiB,QAAS,IAAM,CACnCO,IAEAD,GACF,cAAcA,CAAa,EAG7BC,EAAiB,GACjBP,EAAS,SAAW,GACpBM,EAAgB,YAAY,IAAM,CAEhC,MAAMM,EAAWP,EADG,IAAI,KAGxB,GAAIO,GAAY,EAAG,CACjB,cAAcN,CAAa,EAC3BI,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,qBACjB,CAAO,EACDG,EAAc,CAAC,EACfN,EAAiB,GACjB,MACD,CAED,MAAMO,EAAOC,EAAUH,CAAQ,EAC/BC,EAAcC,CAAI,CACnB,EAAE,GAAI,EACT,CAAC,EAGD,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASP,EAAc,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACxDnB,EAAO,YAAcoB,EAAeJ,CAAI,EACxCf,EAAQ,YAAcmB,EAAeH,CAAK,EAC1Cf,EAAU,YAAckB,EAAeF,CAAO,EAC9Cf,EAAU,YAAciB,EAAeD,CAAO,CAChD,CAGA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}